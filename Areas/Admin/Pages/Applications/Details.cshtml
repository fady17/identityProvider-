@page "/Admin/Applications/Details/{id}"
@model Orjnz.IdentityProvider.Web.Areas.Admin.Pages.Applications.DetailsModel
@using OpenIddict.Abstractions
@{
    ViewData["Title"] = "Application Details";
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-page="/Index" asp-area="Admin">Admin Home</a></li>
        <li class="breadcrumb-item"><a asp-page="./Index">Client Applications</a></li>
        <li class="breadcrumb-item active" aria-current="page">@(Model.Application?.DisplayName ?? "Unknown") (@(Model.Application?.ClientId ?? "Unknown"))</li>
    </ol>
</nav>

@if (Model.Application == null)
{
    <div class="alert alert-danger" role="alert">
        Client Application not found. <a asp-page="./Index">Return to list.</a>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <div class="me-3">
                <i class="fas fa-mobile-alt text-info" style="font-size: 2.5rem;"></i>
            </div>
            <div>
                <h1 class="mb-0">@Html.DisplayFor(model => model.Application!.DisplayName)</h1>
                <p class="text-muted mb-0">Details for Client ID: <code>@Html.DisplayFor(model => model.Application!.ClientId)</code></p>
            </div>
        </div>
        <div>
            <a asp-page="./Edit" asp-route-id="@Model.Application.Id" class="btn btn-warning me-2">
                <i class="fas fa-edit me-1"></i> Edit Application
            </a>
            <a asp-page="./Index" class="btn btn-outline-secondary">
                <i class="fas fa-list me-1"></i> Back to List
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-7 col-xl-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0"><i class="fas fa-info-circle me-2"></i>Basic Information</h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4 col-md-3">Application ID (Internal)</dt>
                        <dd class="col-sm-8 col-md-9"><code>@Model.Application.Id</code></dd>

                        <dt class="col-sm-4 col-md-3">Client ID</dt>
                        <dd class="col-sm-8 col-md-9"><code>@Model.Application.ClientId</code></dd>

                        <dt class="col-sm-4 col-md-3">Display Name</dt>
                        <dd class="col-sm-8 col-md-9">@Model.Application.DisplayName</dd>

                        <dt class="col-sm-4 col-md-3">Client Type</dt>
                        <dd class="col-sm-8 col-md-9">@Model.Application.ClientType</dd>
                        
                        <dt class="col-sm-4 col-md-3">Client Secret</dt>
                        <dd class="col-sm-8 col-md-9">@Model.Application.ClientSecret</dd>

                        @if (!string.IsNullOrEmpty(Model.Application.ApplicationType))
                        {
                            <dt class="col-sm-4 col-md-3">Application Type</dt>
                            <dd class="col-sm-8 col-md-9">@Model.Application.ApplicationType</dd>
                        }

                        @if (!string.IsNullOrEmpty(Model.Application.ConsentType))
                        {
                            <dt class="col-sm-4 col-md-3">Consent Type</dt>
                            <dd class="col-sm-8 col-md-9">@Model.Application.ConsentType</dd>
                        }

                        @if (Model.Application.ProviderId.HasValue)
                        {
                            <dt class="col-sm-4 col-md-3">Linked Provider</dt>
                            <dd class="col-sm-8 col-md-9">
                                <a asp-page="/Providers/Details" asp-area="Admin" asp-route-id="@Model.Application.ProviderId.Value">
                                    @Model.Application.ProviderName (ID: @Model.Application.ProviderId)
                                </a>
                            </dd>
                        }
                    </dl>
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0"><i class="fas fa-link me-2"></i>Endpoint URIs</h5>
                </div>
                <div class="card-body">
                    <h6>Redirect URIs</h6>
                    @if (Model.Application.RedirectUris.Any())
                    {
                        <ul class="list-unstyled">
                            @foreach (var uri in Model.Application.RedirectUris)
                            {
                                <li><code>@uri</code></li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No redirect URIs configured.</p>
                    }

                    <hr class="my-3">

                    <h6>Post-Logout Redirect URIs</h6>
                    @if (Model.Application.PostLogoutRedirectUris.Any())
                    {
                        <ul class="list-unstyled">
                            @foreach (var uri in Model.Application.PostLogoutRedirectUris)
                            {
                                <li><code>@uri</code></li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No post-logout redirect URIs configured.</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-5 col-xl-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0"><i class="fas fa-shield-alt me-2"></i>Permissions</h5>
                </div>
                <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                    @if (Model.Application.Permissions.Any())
                    {
                        var groupedPermissions = Model.Application.Permissions
                            .Select(p => new { Value = p, Group = GetPermissionGroup(p), Text = GetPermissionFriendlyName(p) })
                            .GroupBy(p => p.Group)
                            .OrderBy(g => g.Key);

                        foreach (var group in groupedPermissions)
                        {
                            <strong class="d-block mt-2 mb-1">@group.Key</strong>
                            <ul class="list-unstyled ps-3">
                                @foreach (var perm in group.OrderBy(p => p.Text))
                                {
                                    <li><small><code>@perm.Value</code> (@perm.Text)</small></li>
                                }
                            </ul>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No permissions granted.</p>
                    }
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0"><i class="fas fa-check-circle me-2"></i>Requirements</h5>
                </div>
                <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                    @if (Model.Application.Requirements.Any())
                    {
                        <ul class="list-unstyled">
                            @foreach (var req in Model.Application.Requirements.OrderBy(r => r))
                            {
                                <li><small><code>@req</code> (@GetRequirementFriendlyName(req))</small></li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No special requirements.</p>
                    }
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0"><i class="fas fa-cogs me-2"></i>Settings & Properties</h5>
                </div>
                <div class="card-body">
                    <h6>Settings</h6>
                    <pre class="bg-light p-2 rounded" style="max-height: 150px; overflow-y: auto;"><code style="font-size: 0.8em;">@Model.Application.SettingsJson</code></pre>
                    <hr class="my-3">
                    <h6>Custom Properties</h6>
                    <pre class="bg-light p-2 rounded" style="max-height: 150px; overflow-y: auto;"><code style="font-size: 0.8em;">@Model.Application.PropertiesJson</code></pre>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3 mb-5">
        <a asp-page="./Edit" asp-route-id="@Model.Application.Id" class="btn btn-warning"><i class="fas fa-edit"></i> Edit</a>
        <a asp-page="./Delete" asp-route-id="@Model.Application.Id" class="btn btn-danger"><i class="fas fa-trash"></i> Delete</a>
        <a asp-page="./Index" class="btn btn-outline-secondary"><i class="fas fa-list"></i> Back to List</a>
    </div>
}

@{
    // Helper functions for display names (can be moved to PageModel or a service)
    string GetPermissionGroup(string permissionValue)
    {
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.Endpoint)) return "Endpoints";
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.GrantType)) return "Grant Types";
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.ResponseType)) return "Response Types";
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.Scope)) return "Scopes";
        return "Other";
    }

    string GetPermissionFriendlyName(string permissionValue)
    {
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.Scope))
            return permissionValue.Substring(OpenIddictConstants.Permissions.Prefixes.Scope.Length);
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.Endpoint))
            return permissionValue.Substring(OpenIddictConstants.Permissions.Prefixes.Endpoint.Length);
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.GrantType))
            return permissionValue.Substring(OpenIddictConstants.Permissions.Prefixes.GrantType.Length);
        if (permissionValue.StartsWith(OpenIddictConstants.Permissions.Prefixes.ResponseType))
            return permissionValue.Substring(OpenIddictConstants.Permissions.Prefixes.ResponseType.Length);
        return permissionValue;
    }

    string GetRequirementFriendlyName(string requirementValue)
    {
        // Updated to handle different possible constant names for PKCE
        if (requirementValue == "pkce" || 
            requirementValue == "proof_key_for_code_exchange" ||
            requirementValue.Contains("pkce", StringComparison.OrdinalIgnoreCase)) 
        {
            return "PKCE (Proof Key for Code Exchange)";
        }
        
        // Add other friendly names for requirements if needed
        return requirementValue;
    }
}